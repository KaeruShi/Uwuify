import javax.crypto.Cipher
import javax.crypto.SecretKey
import javax.crypto.spec.IvParameterSpec
import javax.crypto.spec.SecretKeySpec

plugins {
    id 'com.android.application'
}
ext {
    // Themers: DO NOT MODIFY
    byte[] key = new byte[16]
    new Random().nextBytes(key)
    KEY = key
    byte[] iv = new byte[16]
    new Random().nextBytes(iv)
    IV_KEY = iv
}
android {
    compileSdk 33

    defaultConfig {
        applicationId "kaerushi.weeabooify.uwuify"
        minSdk 29
        targetSdk 33
        versionCode 1
        versionName "Initial Release"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "IV_KEY", "\"" + IV_KEY + "\""
        buildConfigField "byte[]", "DECRYPTION_KEY", String.valueOf("\"" + KEY + "\"").replace("\"", "").replace("[", "{").replace("]", "}")
        buildConfigField "byte[]", "IV_KEY", String.valueOf("\"" + IV_KEY + "\"").replace("\"", "").replace("[", "{").replace("]", "}")
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    namespace 'kaerushi.weeabooify.uwuify'
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'

    implementation 'com.google.android.material:material:1.8.0'

    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    implementation "com.github.topjohnwu.libsu:core:5.0.4"
    implementation "com.github.topjohnwu.libsu:service:5.0.4"
    implementation "com.github.topjohnwu.libsu:nio:5.0.4"

    // APK Signer
    implementation 'org.bouncycastle:bc-fips:1.0.2.3'
    implementation 'org.bouncycastle:bcpkix-fips:1.0.7'

    // Zip Util
    implementation 'org.zeroturnaround:zt-zip:1.15'

    implementation "com.jaredrummler:android-shell:1.0.0"
    implementation 'androidx.work:work-runtime:2.8.0'
    implementation 'androidx.work:work-runtime-ktx:2.8.0'

    // UI Stuff
    implementation "androidx.viewpager2:viewpager2:1.0.0"
    implementation 'com.github.bumptech.glide:glide:4.14.2'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.14.2'
    implementation 'com.facebook.shimmer:shimmer:0.5.0'
    implementation 'de.hdodenhof:circleimageview:3.1.0'

    // Impleentation
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}


// Themers: DO NOT MODIFY ANYTHING BELOW
task encryptAssets {
    def tempAssets = new File(getProjectDir(), "/src/main/assets-temp")
    if (!tempAssets.exists()) {
        println("Encrypting duplicated assets, don't worry, your original assets are safe...")
        def list = []
        def dir = new File(getProjectDir(), "/src/main/assets")
        dir.eachFileRecurse(groovy.io.FileType.FILES) { file ->
            list << file

            FileInputStream fis = new FileInputStream(file)
            File fo = new File(file.getAbsolutePath().replace("assets", "assets-temp"))
            fo.getParentFile().mkdirs()
            FileOutputStream fos = new FileOutputStream(fo)
            byte[] buffer = new byte[4096]
            int n
            while ((n = fis.read(buffer)) != -1) {
                fos.write(buffer, 0, n)
            }
            fis.close()
            fos.close()
        }

        list.each {
            if (it.getAbsolutePath().contains("Overlays")) {
                Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding")
                SecretKey secret = new SecretKeySpec(KEY, "AES")
                IvParameterSpec iv = new IvParameterSpec(IV_KEY)

                cipher.init(Cipher.ENCRYPT_MODE, secret, iv)
                FileInputStream fis = new FileInputStream(it)
                FileOutputStream fos = new FileOutputStream(it.getAbsolutePath() + ".enc")

                byte[] input = new byte[64]
                int bytesRead
                while ((bytesRead = fis.read(input)) != -1) {
                    byte[] output = cipher.update(input, 0, bytesRead)
                    if (output != null) {
                        fos.write(output)
                    }
                }
                byte[] output = cipher.doFinal()
                if (output != null) {
                    fos.write(output)
                }
                fis.close()
                fos.flush()
                fos.close()

                it.delete()
            }
        }
    } else {
        throw new RuntimeException("Old temporary assets found! Try and do a clean project.")
    }
}

project.afterEvaluate {
    preBuild.dependsOn encryptAssets
}

gradle.buildFinished {
    def tempAssets = new File(getProjectDir(), "/src/main/assets-temp")
    if (tempAssets.exists()) {
        println("Cleaning duplicated encrypted assets, not your decrypted assets...")
        def encryptedAssets = new File(getProjectDir(), "src/main/assets")
        encryptedAssets.deleteDir()

        tempAssets.eachFileRecurse(groovy.io.FileType.FILES) { file ->
            FileInputStream fis = new FileInputStream(file)
            File fo = new File(file.getAbsolutePath().replace("assets-temp", "assets"))
            fo.getParentFile().mkdirs()
            FileOutputStream fos = new FileOutputStream(fo)
            byte[] buffer = new byte[4096]
            int n
            while ((n = fis.read(buffer)) != -1) {
                fos.write(buffer, 0, n)
            }
            fis.close()
            fos.close()
        }
        tempAssets.deleteDir()
    }
}
